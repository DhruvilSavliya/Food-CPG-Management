package com.food.cpg.purchaseorder;

import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.food.cpg.vendor.Vendor;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.powermock.api.mockito.PowerMockito.spy;
import static org.powermock.api.mockito.PowerMockito.verifyPrivate;

@RunWith(PowerMockRunner.class)
@PrepareForTest(PurchaseOrder.class)
public class PurchaseOrderTest {

    private static final String ORDER_NUMBER_PREFIX = "PO-";
    private static final String GET_PERSISTENCE_METHOD_NAME = "getPersistence";
    private static final String GET_MANUFACTURER_ID_METHOD_NAME = "getLoggedInManufacturerId";

    @Mock
    IPurchaseOrderPersistence purchaseOrderPersistence;

    @Mock
    PurchaseOrderRawMaterial purchaseOrderRawMaterial;

    @Test
    public void addPurchaseOrderRawMaterialsTest() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        String autoGeneratedOrderNumber = purchaseOrder.getOrderNumber();

        Assert.assertNull(purchaseOrder.getPurchaseOrderRawMaterials());

        PurchaseOrderRawMaterial purchaseOrderRawMaterial = new PurchaseOrderRawMaterial();

        purchaseOrder.addPurchaseOrderRawMaterials(purchaseOrderRawMaterial);

        List<PurchaseOrderRawMaterial> purchaseOrderRawMaterials = purchaseOrder.getPurchaseOrderRawMaterials();
        Assert.assertNotNull(purchaseOrderRawMaterials);
        Assert.assertEquals(1, purchaseOrderRawMaterials.size());
        Assert.assertEquals(autoGeneratedOrderNumber, purchaseOrderRawMaterials.get(0).getPurchaseOrderNumber());
    }

    @Test
    public void generateOrderNumberTest() throws Exception {
        PurchaseOrder purchaseOrder = new PurchaseOrder();

        Assert.assertNotNull(purchaseOrder.getOrderNumber());
        Assert.assertTrue(purchaseOrder.getOrderNumber().contains(ORDER_NUMBER_PREFIX));
    }

    @Test
    public void saveTest() throws Exception {
        PurchaseOrder purchaseOrder = spy(new PurchaseOrder());
        purchaseOrder.setManufacturerId(1);
        purchaseOrder.addPurchaseOrderRawMaterials(purchaseOrderRawMaterial);

        PowerMockito.doReturn(purchaseOrderPersistence).when(purchaseOrder, GET_PERSISTENCE_METHOD_NAME);
        PowerMockito.doNothing().when(purchaseOrderPersistence).save(purchaseOrder);
        PowerMockito.doReturn(1).when(purchaseOrder, GET_MANUFACTURER_ID_METHOD_NAME);
        PowerMockito.doNothing().when(purchaseOrderRawMaterial).save();

        purchaseOrder.save();
        verifyPrivate(purchaseOrder).invoke(GET_PERSISTENCE_METHOD_NAME);
        verify(purchaseOrderPersistence, times(1)).save(purchaseOrder);
        verify(purchaseOrderRawMaterial, times(1)).save();
    }
}
